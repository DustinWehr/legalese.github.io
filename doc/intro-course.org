#+TITLE: An Introductory Course in Computable Contracts

* Introduction

This course was designed in mid-2017 to survey the field of computational contracts, which is just now emerging from academia toward industrial practice.

** Audiences

The course is intended for two audiences.

One, the non-technical reader with some experience with the legal profession, considering a career in legal engineering, unafraid to dip a toe into computer science. A bright young law student, perhaps with some natural affinity for programming, who seeks alternatives to the standard future: junior associate, senior associate, partner, corpse.

Two, the technical reader, perhaps a self-taught or [[http://matt.might.net/articles/what-cs-majors-should-know/][classically educated programmer]], who is interested in approaching contract law as a special case of applied computer science.

This is not a bloodless sport. You might have parents or friends who are lawyers. As a computer geek at heart, you might feel a certain competitive urge to show that your magic is as strong as theirs. Nurture this flame. It is an authentic motivation.

There is a third type of audience. Maybe you grew up coding, but now find yourself working in law. Perhaps you are entertaining thoughts about defecting to the other camp where your first love still awaits. We can neither confirm nor deny that any such attempts will succeed. Say nothing, but blink twice if you understand.

** By the end of this course

You will gain passing acquaintance with the foundational technologies, past and current efforts, and leading figures in the field of computational law in general, and computable contracts in particular.

** Course Structure

This is a self-study course. It's mostly readings, web pages, and some videos.

If you get stuck, ask for help on the Legalese slack chat.

* Volume 1 (two days) -- Background Survey

** Motivation and Explication

1. http://compk.stanford.edu/ articulates a vision.
2. Harry Surden (2014) explained computable contracts on his blog ([[http://www.harrysurden.com/wordpress/archives/203][part 1]], [[http://www.harrysurden.com/wordpress/archives/230][part 2]]).

** A Quick Survey of Prior Art in Computable Contracts

Ready to add some tabs to your browser?

The two most important readings are marked *IMPORTANT* below. If you print anything, print those two chapters. Skim everything else, but read those.

Computable contracts is a narrow segment of computational law, which goes back over 30 years. For a sense of the larger field, see [[https://www.researchgate.net/publication/259872879_The_TAXMAN_Project_Towards_a_Cognitive_Theory_of_Legal_Argument][the contents page of Computer Science and Law]] (1979), [[https://drive.google.com/open?id=0BxOaYa8pqqSwNWg4d1lsSGJnSVE][the ICAIL retrospective]] (2012), and [[https://drive.google.com/open?id=0BxOaYa8pqqSwNFlaNEUzd1d3RGc][slides from the intro to AI & Law workshop at ICAIL 2017]].

*** American Work

1. The earliest work dates back to 1988: skim Ronald Lee's [[https://www.researchgate.net/publication/228185635_A_Logic_Model_for_Electronic_Contracting][A Logic Model for Electronic Contracting]].
2. In the late 1990s and early 2000s, Nick Szabo put forward [[http://nakamotoinstitute.org/contract-language/][a formal language for contracts]].
3. In 2011 some Argentinians published [[http://publicaciones.dc.uba.ar/Publications/2011/GMS11/gms_flacos-2011-tr.pdf][FormaLex]].
4. More recently, Flood & Goodenough published [[https://www.financialresearch.gov/working-papers/files/OFRwp-2015-04_Contract-as-Automaton-The-Computational-Representation-of-Financial-Agreements.pdf][Contract as Automaton]] (2015, 2017).
5. In 2016, [[https://www.hklaw.com/Josias-Dewey/][Josias Dewey]] of [[http://contractcode.io/][contractcode.io]] wrote a [[https://docs.google.com/document/d/1Cun8B6V_CbedxrhW26j0ZfAfcuVKtrVOdg9tY7XR8Lw/edit][white paper]].
6. In 2017, Shrutarshi Basu, Ph.D. candidate at Cornell, wrote a conveyancing reasoner: http://basus.me/conveyor/

*** European Work

1. In the 2000s, Jean-Marc Eber wrote [[https://www.lexifi.com/files/resources/MLFiPaper.pdf][Composing Contracts: an adventure in financial engineering]]. That paper begat [[https://www.lexifi.com/product/technology/contract-description-language][MLFi]], a domain-specific language for financial contracts. Eber's company, [[https://www.lexifi.com/company][LexiFi]], sells to financial institutions.
2. In 2002, [[https://www.computer.org/csdl/proceedings/hicss/2002/1435/07/14350170b.pdf][Using Event Semantics for Modeling Contracts]] came out of the Netherlands.
3. The [[http://www.estrellaproject.org/][Estrella Project]] ran from 2006 to 2008, [[http://www.leibnizcenter.org/][out of Amsterdam]], and produced [[https://github.com/RinkeHoekstra/lkif-core][LKIF]], a legal ontology -- [[http://www.leibnizcenter.org/~winkels/LegalOntologies.html][one of many]]. LKIF is based on [[https://en.wikipedia.org/wiki/Knowledge_Interchange_Format][KIF]] which was a creation of Michael Genesereth and others.
4. In 2005, Adrian Paschke at TUM.de (et al) described [[http://rbsla.ruleml.org/docs/37910209.pdf][ContractLog]] to cover SLAs.
5. From 2007 to 2010, in Norway, [[http://cosodis.project.ifi.uio.no/][the CoSoDIS project]] begat the contract language CL, under [[http://www.cse.chalmers.se/~gersch/][Schneider]] (in Sweden). Browse [[http://cosodis.project.ifi.uio.no/publications.shtml][publications]].
6. *IMPORTANT* -- Chapter 1 of Camilleri's 2015 [[https://gupea.ub.gu.se/bitstream/2077/40725/1/gupea_2077_40725_1.pdf][Analysing Normative Contracts]] briefly surveys the field of computable contracts. The rest of the thesis demonstrates applications of CL: [[http://remu.grammaticalframework.org/contracts/diagrams/][contract-oriented diagrams]] (web), a [[http://remu.grammaticalframework.org/contracts/cnl/][CNL editor]] (web), and [[http://www.cs.um.edu.mt/~svrg/Tools/CLTool/][CLan]] (Java), a contract language analyzer, produced under [[http://remu.grammaticalframework.org/contracts/][the REMU project]], funded by the Swedish Research Council.
7. *IMPORTANT* -- Chapter 1 of Hvitved's 2012 [[https://drive.google.com/open?id=0BxOaYa8pqqSwbl9GMWtwVU5HSFU][Contract Formalization]] comprehensively surveys the prior art in contract languages. That chapter describes many efforts not listed here.
8. Chapter 2 introduces his language, [[https://drive.google.com/open?id=0BxOaYa8pqqSwbl9GMWtwVU5HSFU][CSL]]. CSL was developed as part of [[http://www.sciencedirect.com/science/article/pii/S156783260800074X][POETS]] under the Danish Advanced Technology Foundation's [[http://web.archive.org/web/20141216182613/http://3gerp.org/][3gERP]] project. The implementation is in Haskell.

*** Multinational Work
1. [[http://www.r3.com/][R3]] has raised a lot of money. They work with banks, because that's where the money is. They run [[https://www.eventsforce.net/r3/frontend/reg/tAgendaWebsite.csp?pageID=1976&ef_sel_menu=44&eventID=9&mode=&eventID=9][summits on smart contracts]] and have published on smart contract templates: [[https://arxiv.org/abs/1608.00771][foundations]] and [[https://arxiv.org/pdf/1612.04496][requirements]] (2016). See [[https://drive.google.com/file/d/0BxOaYa8pqqSwWTAzS3hjZUlVWUk/view?usp=sharing][slides from June 2016]]. Their demo runs ISDA master templates through an end-to-end proof of concept prototype against a DLT/blockchain.
2. ISDA, the trade association, encourages the use of [[https://www2.isda.org/functional-areas/technology-infrastructure/fpml/][FpML]].

** Prior Art in Regulations, Compliance, and Rules

Contracts are private law; legislation and regulation are public law. Enterprises have internal laws, called Business Rules.

1. [[https://en.wikipedia.org/wiki/Business_rules_engine][Business Rules Engines]] have been around forever: [[https://en.wikipedia.org/wiki/Oracle_Policy_Automation][Oracle Policy Automation]] dates back to 2008. [[https://www.neotalogic.com/][Neota Logic]] is a recent entrant. See also [[https://en.wikipedia.org/wiki/Drools][Drools]], [[https://en.wikipedia.org/wiki/Jess_(programming_language)][Jess]], [[https://www-01.ibm.com/software/info/ilog/][iLog]]. IBM Watson's [[http://io9.gizmodo.com/ibms-watson-can-now-debate-its-opponents-1571837847][Debater does a bit of this]].
2. In Australia, [[http://www.governatori.net/research/pubs/index.html][Guido Governatori]] has been doing for legislation what the above efforts do for contracts. http://digital-legislation.net describes computable legislation and regulations; see the [[https://digital-legislation.net/img/concept-map.pdf][marketecture PDF]].
3. [[https://www.unibo.it/sitoweb/monica.palmirani/en][Monica Palmirani]] chairs the [[https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=legalruleml][OASIS committee]] for [[http://www.governatori.net/papers/2013/ruleml2013tutorial.pdf][LegalRuleML]] (2013 tutorial). See the [[https://lists.oasis-open.org/archives/legalruleml/][mailing list archives]].
4. The [[http://web.archive.org/web/20080422234946/http://www.normeinrete.it/][NormeinRete]] project ran from 1999 to 2007, and has produced work such as [[https://www.researchgate.net/publication/260387643_xmLegesEditor_an_OpenSource_Visual_XML_Editor_for_supporting_Legal_National_Standards][xmLegesEditor]], part of the [[http://www.xmleges.org/eng/index.php?option=com_frontpage&Itemid=1][XMLeges]] suite.
5. [[http://benjamingrosof.com/][Ben Grosof]]'s company [[http://www.coherentknowledge.com/][Coherent Knowledge]] commercializes Textual RuleLog (a Prolog variant) as Ergo, to reason through regulatory compliance. See 2016 [[variant of Textual R][YouTube demo]] (15m), 2015 [[https://www.slideshare.net/ruleml2012/ruleml2015-tutorial-powerful-practical-semantic-rules-in-rulelog-fundamentals-and-recent-progress][RuleML slides]].
6. In Pittsburgh (with Matthias Grabmair), the [[http://dl.acm.org/citation.cfm?id=2746096&dl=ACM&coll=DL&CFID=937658292&CFTOKEN=67801372][LUIMA project]] attempts to extract semantics from regulations. See also [[https://www.researchgate.net/publication/266177190_On_Rule_Extraction_from_Regulations][Adam Wyner]]; and [[h p://works.bepress.com/hyun_lee/2/][Applying Software Development Techniques to Statutory Drafting]].

The name for this field is "RegTech".

** Prior Art: Non-Computational Contracts

We call this the "document assembly" or "document automation" industry.

*** Commercial efforts

- [[http://www.contractexpress.com/][ContractExpress]] (first website 2002)
- [[http://www.hotdocs.com/][HotDocs]] (first website 1996, software v4.0)
- [[http://www.exari.com/][Exari]] (first website 2006)

*** Opensource Template and Expert Systems

- [[http://commonaccord.org/][CommonAccord]] (started 2001)
- [[http://commonform.github.io][CommonForm]] (started Feb 2015)
- [[http://docassemble.org/][DocAssemble]] (started Jan 2016)

*** Why aren't template approaches good enough?

- [[https://medium.com/@Legalese/code-is-law-is-code-4492c864f33f][Because you need first-class functions,]] and a formalization that natively supports modal logics in a way that naturally lends itself to formal verification methods.

** Conferences

Skim the proceedings of past conferences.

- FLACOS, the workshop on Formal Languages And Contract-Oriented Software, ran from 2007 to 2012. [[http://flacos07.project.ifi.uio.no/][2007]] ([[http://folk.uio.no/gerardo/report-UiO-366.pdf][proceedings]]), [[http://flacos08.project.ifi.uio.no/][2008]] ([[http://www.cs.um.edu.mt/gordon.pace/Workshops/FLACOS2008/Proceedings.pdf][proceedings]]), [[http://web.archive.org/web/20130118003725/http://www.dsi.uclm.es/retics/flacos09/][2009]] ([[http://www.cs.um.edu.mt/gordon.pace/Research/Papers/flacos2009proceedings.pdf][proceedings]]), [[http://www.sefm2010.isti.cnr.it/workshops_flacos.php][2010]] ([[https://pdfs.semanticscholar.org/a6b8/1666650c9635f52c212a4fb2d481bbc1f02c.pdf][proceedings]]), [[http://flacos11.lcc.uma.es/][2011]] ([[https://arxiv.org/html/1109.2399][proceedings]]), [[http://www.um.edu.mt/ict/flacos2012/][2012]] ([[http://eptcs.web.cse.unsw.edu.au/content.cgi?FLACOS2012][proceedings]]).
- [[https://nms.kcl.ac.uk/icail2017/][ICAIL]] is in its 16th year; see [[http://dl.acm.org/event.cfm?id=RE294&CFID=947570198&CFTOKEN=59975776][past papers]].
- [[http://jurix.nl/][Jurix]] is in its 30th year, run by the Dutch [[https://en.wikipedia.org/wiki/JURIX][Foundation for Legal Knowledge and Information Systems]].
- summer school: [[https://lawandlogic.org/][Law and Logic]]
- summer school: [[http://2017.ruleml-rr.org/][RuleML / Rules and Reasoning]]
- summer school: [[http://deepspec.org/events/ss17detail.html][DeepSpec]]

** Researchers

European researchers tend to be CS professors with an interest in law.

US researchers tend to be law professors with an interest in software.

*** European researchers

- [[http://www.cse.chalmers.se/~gersch/][Gerardo Schneider]], CS Professor at the University of Gothenburg, Sweden. (Connected with CL)
- [[http://www.cs.um.edu.mt/gordon.pace/projects.html][Gordon Pace]], Associate CS/ICT Professor at the University of Malta
- [[http://www.cse.chalmers.se/~cajohn/][John J. Camilleri]], Ph.D. student at Chalmers University of Technology and the University of Gothenburg, Sweden.
- [[http://www.governatori.net/research/][Guido Governatori]], Senior Principal Researcher at NICTA Queensland, Australia. (Connected with digital-legislation.net)
- [[http://www.eui.eu/DepartmentsAndCentres/Law/People/Professors/Sartor.aspx][Giovanni Sartor]], Professor, Legal Informatics, European University Institute of Florence.
- [[https://www.abdn.ac.uk/ncs/people/profiles/azwyner][Adam Wyner]], Lecturer, University of Aberdeen, focuses on modeling argumentation and legal reasoning.

*** USA!

- [[http://www.harrysurden.com/][Harry Surden]], Colorado Law School. [[http://lawreview.law.ucdavis.edu/issues/46/2/articles/46-2_surden.pdf][Computable Contracts]], 2012
- [[http://www.danielmartinkatz.com/][Daniel Martin Katz]], Illinois Tech - Chicago Kent College of Law. [[https://computationallegalstudies.com/][Computational Legal Studies]], co-founder [[https://lexpredict.com/][LexPredict]].
- [[https://en.wikipedia.org/wiki/John_Henry_Clippinger,_Jr.][John Henry Clippinger]], MIT Media Lab, previously the [[https://cyber.harvard.edu/people/jclippinger][Law Lab]] at Berkman with
- [[http://www.vermontlaw.edu/directory/person?name=Goodenough,Oliver][Oliver Goodenough]], Vermont Law School, co-founder [[https://www.skoposlabs.com/][Skopos Labs]]; co-authored with
- [[http://www.flood-dalton.org/mark/][Mark Flood]], [[http://www.treasury.gov/initiatives/Pages/ofr.aspx][OFR]].
- [[http://www.nyls.edu/faculty/faculty-profiles/faculty_profiles/houman_shadab/][Houman Shadab]], New York Law School, co-founder [[http://clause.io/][clause.io]].

** Organizations with related interests

Mostly in the blockchain / smart contracts space.

- Primavera's [[http://coalalex.org/][Coala Lex]] is interested in relating blockchain smart contracts to the incumbent legal system.
- [[https://www.hyperledger.org/][Hyperledger]] comes off the Linux Foundation.

** Other Resources

Legalese's "[[https://legalese.com/v1.0/page/past][Past]]" page attempts to survey the research.

Legalese's "[[https://legalese.com/v1.0/page/present][Present]]" page shows the subset of today's LegalTech industry landscape related to contracts.

* Volume 2 (one semester) -- Introduction to L4

This volume teaches L4. It will take a few months to get productive.

As a newly fledged legal developer, you will be ready to use the language and its tools to read and write contracts-as-code and legislation-as-code.

You will be able to generate visualizations and operate the verification engine.

You can start contributing to opensource libraries of contract code. Share your work on Github.

** Contents

*** Motivation

- Darmstadter, Precision's Counterfeit
- https://papers.ssrn.com/sol3/papers.cfm?abstract_id=332941

*** Warm-Ups: Trying Out Some Existing Contract Language Environments

- Visit AnaCon, CL, Clang. Observe C-OD.
- Visit the Basus environment.
- Visit [[https://drive.google.com/open?id=0BxOaYa8pqqSwbl9GMWtwVU5HSFU][CSL]] and POETS.
- You should at least learn SQL.

*** The Be-All and End-All of Contract Languages

**** Introduction to L4.
L4 is basically CL's extensions bolted on top of a CSL core.

**** Using L4 to develop contracts.
Write your first contract.
**** Syntax: Control Flow and Clause Composition
**** Syntax: Rules
**** Syntax: Genre Extensions
financial agreements

startup investments

corporate law

employment agreements

NDAs

ESOPs

conveyancing

maritime agreements

**** Review the contract library.
Jurisdiction customization.
**** Using L4 to develop legislation.
Write your first bill.
Rule defeasibility.
**** Review the statute library.

*** Secondary Weapon Enhancements

**** Automated Bug-Finding.

Introduction to CTL*.

Review of Model Checking with CL.

Property verification via model checking.

Conflict detection via model checking.
***** A Bestiary of Standard Bugs

****** Type Errors.
Debt vs Equity.
****** Action Conflicts.
****** Rule Conflicts.
****** Loopholes.
****** Dangling References.
****** Undefined Terms.
****** Inconsistency with Legislation.
****** Model Checking Property Violations.
****** Incompleteness.


**** Multilingual Natural Language Generation.

Introduction to GF.

https://www.youtube.com/watch?v=x1LFbDQhbso

http://www.grammaticalframework.org/~aarne/ud-gf-malta-2017.pdf



***** English Output

***** Italian Output

***** Indonesian Output

***** German Output

https://papers.ssrn.com/sol3/papers.cfm?abstract_id=596668

**** Type Checking.

Sanity checking.

Domain Expressions.

PCSL.

Debt vs Equity example.

**** Visualization. Scenario explorers.

**** Ambiguity.

https://papers.ssrn.com/sol3/papers.cfm?abstract_id=332984

https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1288689

**** Call-Outs to Oracles.



*** Advanced L4

**** The Interpretation Combinator: "It Depends"

**** Ternary Logic: Yes, No, Maybe

**** Building an Expert System in L4

* Volume 3 (one to two years) -- Advanced Background

There is enough material in here for a Master's degree. If you go fast, you could cover it all in a year. If you go deep, it might take two.

You will understand the mathematical logic and architectural decisions that inform the design of the L4 language.

You'll be ready to start developing and extending the core language itself, the way Guido van Rossum develops Python, the way Mats develops Ruby, the way DHH developed Rails.

When you attend academic conferences about law and logic, you will be able to follow the arguments of wizards about the fine points of action logics vs state logics; about whether Hvitved loses anything by defining permission in terms of counterparty obligations; about whether CSL or CL better sidesteps the paradoxes of Standard Deontic Logic; about whether Governatori's defeasible logics map elegantly to SBVR and LegalRuleML.

** Motivation and Problems

- How to be a Genius (vs a Consultant), with thanks to ed kmett.

** Prior Art: Computational Law Projects

We review the above projects in more detail.

** Prior Art: Rule languages. Declarative Programming.

- https://en.wikipedia.org/wiki/Business_rules_engine
- ODRL
- OCL and OCLR
- Business Rule engines. SBVR.
- Oracle Policy Automation. iLog.
- Drools. Jess. The Rete algorithm. SAT.
- Introduction to Logic Programming with Prolog.
- DataLog. Textual Rulelog. Coherent Knowledge.
- Governatori: [[https://www.researchgate.net/publication/37617796_Representing_Business_Contracts_in_RuleML][Representing Business Contracts in RuleML]]

** Use Case: terms of service, privacy policies

- [[https://en.wikipedia.org/wiki/Creative_Commons_Rights_Expression_Language][ccREL]] ([[https://www.w3.org/Submission/ccREL/][w3c]])
- [[https://www.w3.org/community/odrl/][ODRL]]
- http://uterms.software/
- http://openminted.eu/
- http://remu.grammaticalframework.org/contracts/converter/

** Prior Art: Computational Contracts

- Previous Contract Languages. FormaLex, CL, CSL. See [[*A High-Level Survey of Prior Art in Contracts][above]].

** Introduction to Computational Linguistics

- The A.I. Dichotomy: Symbolic vs Statistical, Logic vs Emotion, Apollo vs Dionysus
- Natural Language Processing. NLTK.
- Natural Language Generation.
- Text Planning.
- Introduction to Grammatical Framework.

** Introduction to Mathematical Logic

- [[http://repository.cmu.edu/cgi/viewcontent.cgi?article=1923&context=compsci][On the Unusual Effectiveness of Logic in Computer Science]]
- Predicate Logic.
- Modal logics. Kripke structures. Deontic, Epistemic, Temporal, Dynamic Logics.
- Standard Deontic Logic and its paradoxes.
- Defeasible Logic: Governatori. Finite Automata.

** Introduction to Functional Programming.

- Introduction to Functional Programming. haskellbook.com.

** Programming Language Theory

- Programming Paradigms.
- Types and Programming Languages.
- Automated Theorem Proving
- Agda, Idris and CoQ
- Dependent Types in Haskell
- Dependent Types in GF

** Model Checking

- Model Checking. CTL* and LCTL. Uppaal. Alloy. [[https://yurichev.com/writings/SAT_SMT_draft-EN.pdf][SAT/SMT]]. [[http://smtlib.cs.uiowa.edu/language.shtml][SMTLIB2]]. Z3.

** Our Contribution

- Introduction to Contract Law.
- The Clause Construct.
- The Interpretation Combinator.
- Extending the core language with subdomain expression languages.


* Volume 4 (three to six years) -- Research Directions

After mastering the above subjects, pick an advanced topic and dive in. You may spend several years [[http://matt.might.net/articles/phd-school-in-pictures/][advancing the state of the art]]. For extra credit, move to Northern Europe and attach yourself to one of the professors in the field. You will probably come away with a Ph.D.

- Temporal Issues in Legislative Versioning. Computing legality over time. Introduction to bitemporal databases. Applications to legal scenarios.
- [[http://www.springer.com/gp/book/9783319195742][Logic in the Theory and Practice of Lawmaking]]: textbook. Pre-CS legal scholarship. Legal formalism vs legal realism. Types of rules. Complete vs Incomplete Contracts. Allocation of decision rights under uncertainty: I cut, you choose.
- NLG: Contract drafting. Ken Adams. Tina Stark. Quill. Text planning. [[https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2932333][Interpretive caveats]].

