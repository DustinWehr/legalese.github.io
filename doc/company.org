#+TITLE: Legalese.io the Company

What organizational structure, governance model, and communication processes does Legalese use?

How does Legalese deal with contributions, cash, equity and other expressions of finance?

What expectations can every project participant have about other participants?

In particular, what common vocabulary and knowledge should participants possess?

Discussion of this document is welcome on the #meta and #startup chats.

* Welome, New Contributor!

This is a welcome guide for new participants in Legalese.

No financial relationship is assumed. Later, we will ask you to sign the Contributor License Agreement assigning your contributions to the project.

Legalese is a big project, on the scale of a database language (like SQL) plus a database engine (like InnoDB). While it is possible to make useful contributions quickly, the more challenging parts of the project require you to come up to speed on some of the underlying ideas and technologies.

If you are new to any of:
- opensource projects
- high-tech, high-growth, innovation-driven startups
- commercial organizations
- distributed/virtual/remote organizations

you may find that the way we work is different to the way you have worked in the past, because we combine elements of all of the above.

** Companies build products. Entrepreneurs build companies.

Entrepreneurs build companies. Companies build products.

In the early days, when a handful of founders are doing all the work, it's easy to lose sight of the distinction between working /in/ the company and working /on/ the company, a distinction [[http://www.amazon.com/E-Myth-Revisited-Small-Businesses-About/dp/0887307280/][popularized by Gerber]]. Those who work /in/ the company are *staff*; those who work /on/ the company are *management* or maybe *leadership* or something like that. Founders, especially in the early days, wear both hats.

The traditional model of /staff/ vs /management/ is under attack from new models like Holacracy, which believes that the management function should be distributed across staff, rather than reserving it to specific individuals who carry the burden of being paymaster, boss, and lightning rod.

** Developers build products for users. But users can become developers!

We can look at it from a different angle. The opensource world is already used to muddying the boundary between user and developer.

Engineers are used to *layer models* (for example, [[https://en.wikipedia.org/wiki/OSI_model][the OSI 7-layer network stack]]). The commercial software world might use an organizational boundary to separate users (above) from developers (beneath). There might be more than two layers: in between, there might be tech support or consultants as well.

Opensource invites boundary-crossing between layers. Such promiscuity disgusts some people from the commercial world, but is widely accepted in more progressive segments of society.

Engineers help to develop a product for end-users. Developers work on Legalese to make a product that some random end-user can use in a number of ways -- for example, to produce contracts, resolutions, and workflows; or to learn the meaning of such documents by exploring scenarios.

Where do these developers come from? Often, the lifecycle of an opensource developer begins as an end-user who initially just consumes the product. Then she starts helping others in the support forums. She progresses to file issues, fix bugs, and add features. Eventually she becomes a code reviewer approving or rejecting other people's pull requests.

Now think of company itself as a product. Think of developers as end-users of the company. In that sense, [[http://avc.com/2012/02/the-management-team-guest-post-from-joel-spolsky/][managers are developers]], not of the /end-user/ product, but of the /company/ "product": they help make an organization that developers can use in a number of ways. For example, to obtain expense reimbursements, salary, project fees, and equity upside. Or to learn the meaning of such rewards by exploring scenarios. This category of individual is traditionally called "management" and represents an element of social order that has been around since the invention of the agricultural surplus. They do work which is not product engineering, but is useful to the company nonetheless: for example, before the company is cash flow positive, these "managers" are responsible for going out and talking to investors and bringing capital in, so that the company can afford to pay the engineers who do the real work. They are responsible for filing paperwork that the government requires: for example, audited accounts. They are responsible for getting the t-shirts made.

In the same way that opensource development invites conversion from users to developers, an opensource company invites conversion from engineering to management. Developers can work on building the company. But they don't have to stop being engineers. Anytime an engineer participates in an employment interview, helping to screen new hires, she is performing a management function, without giving up her engineering role.

Both Legalese the company, and Legalese the product, are things that can be versioned and milestoned. Both have end-user personas and requirements specifications and use cases and story cards. Both have a release approval process. Both invite users to become developers.

On the product side, before an contributor can work on certain parts of the codebase, they must first earn badges to prove they are qualified, often by reading specific books (e.g. /Learn You A Haskell For Great GOod/) or videos (like [[https://www.youtube.com/watch?v=peU756mYfjQ][The State of the Art of Legal Technology Circa 2015]]).

On the company side, before a contributor can work on certain parts of the company, they must first read books like /Holacracy/, /the Five Dysfunctions of a Team/, and /the Art of the Start/. But these are just badges, and at the end of the day anyone can level up into any role based on capability and inclination -- as with any opensource project, in theory.

This document describes Legalese the company and the software -- the processes -- that its developers produce.

** The Welcome Booklet

The [[https://drive.google.com/open?id=0B-lTLNYJdzgKRnpKTTBQQjFVSHM][Welcome Booklet PDF]] explains why we exist. It also sets out a reading list which will help you come up to speed with the state of the art in legal informatics. Read it, and the readings in it. (At some point we will move the text of that PDF into this file.)

In a traditional organization, a new hire might spend a couple of weeks, even a couple of months, in training. If McDonalds can have a [[http://www.aboutmcdonalds.com/mcd/corporate_careers/training_and_development/hamburger_university.html][university]], we can have some amount of training. In the software world, we think of training as READMEs, FAQs, docs, and onboarding videos.

The work we do is harder than flipping burgers, so it will take you longer to read all the books. It often takes up to a year for a new contributor to be fully onboarded. Books take time to read.

** The rest of this document

Also read the rest of this document; it explains how the organization works.

* Inspirations

** Opensource Projects

Legalese belongs to the opensource and Creative Commons traditions of Wikipedia, Git, Linux, and Public.Resource.Org, to name a few.

The Internet is built on open software and open standards. Legalese aims to be a major infrastructural pillar of Internet-enabled future commerce, in the same way that Wikipedia has become a major pillar of online education and research.

** Opensource Businesses

Legalese costs money to run. Where will that money come from?

Some opensource infrastructure projects are embarrassingly underfunded. [[http://www.technologyreview.com/view/526386/the-underfunded-project-keeping-the-web-secure/][OpenSSL]] and [[http://www.propublica.org/article/the-worlds-email-encryption-software-relies-on-one-guy-who-is-going-broke][GPG]] recently put out calls for donations. Legalese must be more sustainable than just relying on donations. That means incorporating as a business, maybe getting venture funding. There are many precedents for opensource businesses, including [[http://en.wikipedia.org/wiki/MariaDB][MySQL and MariaDB]].

** "Teal" organizations

Self-managing organizations are better suited to Internet-era post-industrial conditions. See also
- http://www.reinventingorganizations.com/
- http://www.holacracy.org/how-it-works/
- http://venturebeat.com/2015/08/01/our-startup-got-rid-of-email-meetings-and-managers-and-thrived/

Many opensource efforts have much in common with Teal organizations.

* Communication Channels

- realtime chat :: Slack

- email :: Google Groups -- active-team@legalese.io is the primary address. You can [[https://groups.google.com/a/legalese.io/forum/#!forum/active-team][browse the archives]].

- source code, legal templates, and some documents :: Github

- other documents :: Google Drive: [[https://drive.google.com/drive/folders/0B-lTLNYJdzgKfldRU290T3d2LVA3Yk01UG4xM2tlOWU5dU1JaVh4d3h6cmo3Ny1wRWZBeFU][Legalese Shared]].

- project management and task tracking :: Github Issues. We used to use Asana and Basecamp before.

- in-person meetings :: an in-person meeting is only considered a valid project meeting only if the online project group are notified with minutes.

In-person meetings are a natural human instinct, but easily become an anti-pattern. If project team members are omitted from the meeting, intentionally or inadvertently, cliques form, communication breaks down, decisions are made in secret, project members complain "nobody tells me anything", and the integrity of the organization fails.

In-person meetings are acceptable if and only if:
1. all relevant individuals are invited to the meeting
2. provisions are made for people to participate online
3. minutes are posted to the appropriate online chat
4. comments and discussion after the meeting are considered as valid as in-person interaction during the meeting
5. decisions made during the in-person meeting may be reversed or revised pursuant to online followup.

* FAQ: Why do I keep getting redirected to the group chat?
/My main point of contact with Legalese is X, but when I try to talk to X about Legalese, X doesn't seem to want to talk to me directly; instead, X tells me to talk on the mailing list, or the group chat. Why are they being so rude? Who do they think they are?/

They're not being rude to you; they're just being polite to other people. Other people who should be involved in the conversation, and would object to side conversations.

This may be your first experience interacting with an opensource community. Legalese -- the opensource project -- is not a traditional organization with a central point of contact. Legalese, the commercial entity, does offer that kind of support, but only to paying customers. The closer you are to being a paying customer, the more you can expect confidential, personal support. The closer you are to being a project participant, contributing bug reports and pull requests, the more you should expect to talk to your fellow participants, not to some figurehead. The PR spokesman may be the voice of the organization, but she doesn't have any more executive authority than anyone else.

You wouldn't phone up the managing editor of your local newspaper and demand to have the news read to you.

/Then I want to talk to somebody who's in charge!/

Easy! Find a mirror. You're in charge.

First, professors invented the seminar because it was more scalable than one-on-one tuition. Then they figured out they didn't even have to turn up, half the time, and the learning would still go on, as long as the students were there.

In the same way, if you want to interact with Legalese, you already can. If you want to report a bug or file a feature request, go ahead: use Github issues. If you want to spend company funds, bring up the issue on the #reimbursement chat. If you want to complain about the organizational structure, go to #meta. If you want to represent Legalese to some third party entity, you can, so long as you do not commit anyone else within the company to act, without getting their approval first.

/OK, then where do I find letterhead?/

The Legalese logo and artwork are available under logos. You can also get corporate letterhead under the stationery folder.

* FAQ: How do I invite a new person to the project?

There's an onboarding workflow; running that workflow is the responsibilty of the Onboarding Role. To trigger that workflow, speak up on #general. The Onboarding Role will canvass for objections, and if none are received, will kick off the workflow.

* Innovation: Bail-only Design

Adhocracies tend to be highly informal, with people joining and leaving projects all the time.

By analogy with [[http://en.wikipedia.org/wiki/Crash-only_software][crash-only software design]], a bail-only organizational structure aims to increase robustness by removing critical dependence on any individual, allowing any participant to leave the company at any time, and rejoin at a later time -- or never!

Swappable *roles* are emphasized over job titles and fixed areas of authority/responsibility. Any individual who satisfies the prerequisites to assume a role may do so.

* Innovation: Compensation

In a purely volunteer not-for-profit project, little is needed beyond an IP/copyright assignment.

Legalese may take a commercial, for-profit form to maximize sustainability and satisfy investors. How will participants be rewarded?

We draw on the conventions established in the startup industry to manage expectations. If the company has cash available, and participants need to draw a salary from Legalese to continue contributing, then an employment or contractor relationship can be established. If the participant is willing to trade equity for cash, then the participant can be registered in the stock pool. Ideally, cash and equity should be interchangeable.

Compensation could be determined by a participant's fellow Circle members and immediate business units.

Or maybe we do a next-generation approach using some kind of [[http://swarm.fund/][Swarm]] or [[http://www.assembly.com/][Assembly]] or other [[http://www.scribd.com/doc/255347578/SWARM-Working-Paper-Distributed-Networks-and-the-Law][Distributed Collaborative Organisation]] model.

The remainder of this section are notes taken during the March 2016 Legalese Summit.

** Principles

*** Tensions should be pushed to the place where they are best processed, which is often to the edge.

*** We should not spend so much time navel-gazing that everybody gets demoralized and no work gets done.
https://en.wikipedia.org/wiki/The_Centipede%27s_Dilemma

** These are the reference exit scenarios:
- Ludicrous Exit :: The company exits for $10B after 8 years.
- Decent Riches :: The company exits for $60M after 4 years.
- Sad Puppy :: The company exits for $150,000 after 2 years.
- Death :: There is no exit and we agree to shut it all down after 3 years.

** Requirements

This section records requirements expressed by people on the team. It aims to anticipate the expected requirements of future participants.

*** Component: Survival ([[https://en.wikipedia.org/wiki/Kiasi][Kiasiïsm]])

Staff need to have enough money to survive and focus on the job, without having to take outside jobs.

It's a bad idea for founders to pay themselves so little they can't work full time on the startup.

*** Component: Opportunity Cost (Kiasuism on the part of the Contributor)

Don't lose relative to something else. "I spent two years working for a startup and all I got was this stupid t-shirt."

Happy Path: If Person A could have made $100,000 doing independent consulting or working for a Big Company doing a Boring Day Job but instead spent their time at the startup, they should get at least $100,000 upon exit. If Person B could have made $200,000, ditto.

1. People should feel like their opportunity cost was respected.
2. There could be a certain discount to represent the fact that they are taking a risk -- see next section, /Dreams of Avarice/. Founders usually take a pay cut to do their startup. At least, that's what investors want to see.
3. If there is not enough money at the time of exit to give both Persons A and B $300,000, then the compensation should be reduced pro rata, pari passu. So A gets $50,000 and B gets $100,000.
4. If the specific number is not known, then the compensation committee can make a [[https://open.buffer.com/introducing-open-salaries-at-buffer-including-our-transparent-formula-and-all-individual-salaries/][suggestion]]. And if the negotiations fail, then there is no deal.


*** Component: Replacement Value (Kiasuism on the part of the Company)
Nobody is irreplaceable, so if somebody wants to get paid more than they are worth to the Company, maybe the BATNA is: no deal.

The company should ask: what would it cost to contract out that piece of work? This is "core competency" theory.

https://open.buffer.com/introducing-open-salaries-at-buffer-including-our-transparent-formula-and-all-individual-salaries/

(we should add a lawyer grade.)

From [[http://www.pnas.org/content/107/38/16489.full][Kahnemann]], perhaps this component should be a nonlinear function, that more or less caps out around $75,000 a year, adjusted for purchasing power parity.

http://economistsview.typepad.com/economistsview/2008/03/income-and-happ.html

*** Component: Greed

We don't want to micro-detail the intangible contributions -- people should act in the best interests of the company, and evangelize and speak at conferences and make introductions, without asking for a cash reward each time; they should feel that they will benefit down the road, out of equity upside in the future, that will be worth way more in the future than cash today.

We could stack rank these equity awards or we could leave them in an unexamined pot.

Much of this component should be satisfied by one's equity holdings.

*** Initial Snowflake Concept

The "Snowflake Award" shows up as a bonus at the time of exit, out of the equity stake. It is very hard to measure the serendipitous contributions that each person makes, so we just trust that some other people may get a little more than you, and that's okay.

Initial naive proposal: if the above components are all satisfied, then the Snowflake Award is $1M to each participant. And you can take that money and buy some therapy to feel better about yourself.

*** Adjusted Snowflake Algorithm

Monthly, everybody is allocated the kiaxi + kiasu minimum, then they get to decide how much cash vs equity they want to trade off.

Quarterly variable could be contribution.

Different people will then hold different amounts of equity.

In the *Decent Riches* scenario, the exit is $60,000,000. Investors own half the company, and they get $30,000,000. The other $30M is available for distribution to contributors, which is the pot.

pot = 30,000,000. How do we split the loot from the heist?

first, the snowflake award. every contributor who has been with the company for a certain amount of time gets $1M. This is a bit like a professor being awarded tenure. Maybe we take the idea that everybody gets an equal split of a certain percentage of the pot. For example: if there is a acquisition for cash and the pot is 30,000,000.

We decide to take one-third of the cash exit and distribute that equally among all Snowflake contributors.

The other two-thirds are distributed pro rata by shareholding.

The one-third vs two-third could by any N vs (1-N).

*** Component: Intangible Contributions

Person A is a great fit for the startup. They create more value working at that startup than they would working anywhere else.

The Contribution Adjustment could be stack-ranked on a quarterly basis based on outcomes.

For example, introduction to investors could be rewarded. But if the investor actually invests, the contribution could be adjusted up.

*** Component: Cash/Equity Tradeoff

Instead of taking $100 in cash, each contributor can choose to take $50 in cash and invest the other $50, buying equity at the last priced-round rate, or some adjusted interpolation, extrapolation, or approximation thereof. Or each contributor could take $0 in cash and $100 in equity.

At what price should contributors buy that equity?

Should there be a discount? Contributors would say, yes. Other purely financial investors would say, no.

Perhaps the company could point out that the contributors are already getting an intangible benefit because they have the option to buy shares at all; the man on the street does not. And every $50 that they buy today will turn into $5000 in 4 years -- or to $0. So it's an all-or-nothing situation, and they shouldn't quibble about a discount. If they'd gotten a discount, the $50 they put in could turn into $6000 in 4 years.

*** Considerations

1. Do we overvalue people with existing jobs? It is known that people forgo "normal dayjob" levels of compensation to work on their startup.
2. People who join earlier are taking more risk and should be rewarded accordingly. This is the Risk/Reward Ratio.
3. All of the above needs to be tax-structured and optimized.
4. We don't want to distort people's behaviours -- we want to create a structure that brings out the best in people without stressing them out and making them do unnatural things.

*** Base plus project?

Base rate: negotiate an hourly/monthly base rate with the compensation committee, but attached to the badge/role rather than the person.

Project rate: like bountysource. This feature is worth $X to the company. Go do it. Get paid.

Each contributor gets to decide their cash vs equity split each month.

** Scenarios

What happens if Person A does not contribute to the product, but introduces a $2M investor? Should this be paid as a finder's fee?

** Issue-based compensation

Anyone can file a new issue in Github Issues.

Only the Issues Committee can put price tags on issues.

Anyone can start working on an issue. If their pull request satisfies the issue and is approved, they get paid.

Let's not measure everything too much because unmeasured work increases the value of our equity anyway.


** How do we filter new people who want to join the company? 

Either fulfil the minimum criteria which have been defined as issues -- write documentation, or write code.

Or demonstrate unexpected value to the company on your own initiative, and then be approved. You pay your own airfare to the Legalese summit.

Along the way, don't collect any vetos from any of the existing cabal.

"Congratulations! You have been on the opensource project for quite some time, and now your probation period, which you didn't know about, has ended. We would like to offer you a contract to cover a base rate to spend more time on the product side and be a part of the team. We will now cover your airfare to the next Legalese summit."



** Proposal 1

Each participant's compensation is their task fees plus badge rate adjusted for activity level plus circle bonus.

*** Task Fees
When a circle needs something done, it posts a project/task in Asana, with the following attributes:
- badges :: qualifications needed to accomplish that task.
- short credit :: estimated short-term value add, typically measured in cash
- long credits :: estimated long-term value add, typically measured in equity
- hard deliverables :: required acceptance criteria
- soft deliverables :: if the task is done by a certain deadline, or in a certain way, additional short and/or long credits are awarded.
- mutex :: either exclusive or open.
- mushroom :: recurring tasks are mushrooms which anyone can clone and claim.

The short and long credits are allocated out of a budget set by the circle's parent.

A project/task may be restricted to a specific role or circle; or it may be unrestricted. Such a restriction is expressed through the badge mechanism.

If mutex==exclusive then the task can only be assigned to one person at a time.

If mutex==melee then multiple people may compete to execute the task. The first person to demonstrate delivery may win the prize.

*** Auction Mechanism
It is possible for prospects to negotiate elements of a task after it has been posted, so that the short/long credits may float until the market clears. However, such negotiation must occur in the task comments directly. An auction model may arise with multiple prospects bidding for a given task.

*** Credits
Both short and long credits are convertible to a mix of cash and equity.

Short credits may be converted to 100% cash and 0% equity, or 80% cash and 20% equity, or anywhere in between.

Long credits may be converted to 0% cash and 100% equity, or 20% cash and 80% equity, or anywhere in between.

*** Badge Rate
Every participant is entitled to badge rate, multiplied by their activity level.

**** Badges ("Skills")
counts the number and size of badges held by a participant, like plates of sushi at a conveyor belt restaurant.

Badges may run in series, like Javascript Programmer Bronze, then Javascript Programmer Silver, then Javascript Programmer Gold.

**** Seniority
is represented by a special badge that increments every month. A decay function may apply to cover any interruptions or absences. Think of this as the traditional salary band, but with less weight.

**** Roles
are represented by one badge for each role.

*** Badge Weights

Each badge of each participant possesses a weight rating -- a real number usually in the range 0 to 100. If participant wins a bid on a project/task, but does not deliver it to the satisfaction of the commissioning party, they get to choose which of their badges should lose weight. If the project is accepted, the weight increases. When the weight goes over a certain amount, they earn the next badge in the series.

Don't bid for jobs that you don't think you can do, especially mutex jobs.

*** Activity Level
The number of short+long credits achieved in a given period determine the activity level for that period. The activity level is a value between 0 and 1. You may read it this way:
- 0   :: participant was effectively inactive
- 0.5 :: participant was part-time
- 1   :: participant was full-time

*** As Code

#+BEGIN_SRC js

function Company(params) {
  this.compensationPoolSharePrice = params.compensationPoolSharePrice; // 2 would mean in $2 per share

  var equityToCash = function(equity) {
    return equity * this.compensationPoolSharePrice; // if the current value of the company's equity pool is $2 per share
  };

  var cashToEquity = function(cash) {
    return cash / (this.equityToCash(1)); // inverse
  };
}

function Task(params) {
  this.company = params.company;
  this.badges  = params.badges;
  this.short   = params.short;  // short credits
  this.long    = params.long;   // long credits
  this.hard    = params.hard;   // hard acceptance criteria
  this.soft    = params.soft;   // soft acceptance criteria
}

var shortCashMin = 0.80, shortCashMax = 1;
var  longCashMin = 0.00,  longCashMax = 0.20;

function creditsToCashAndEquity(type, quantity, cashComponentDesired, company) {
  var cashComponent;
  if      (type == "short" && cashComponentDesired < shortCashMin) { cashComponent = shortCashMin; console.log("equity component of short credits may not exceed " + (1-shortCashMin)); }
  else if (type == "short" && cashComponentDesired > shortCashMax) { cashComponent = shortCashMax; console.log(  "cash component of short credits may not exceed " + shortCashMax); }
  else if (type == "long"  && cashComponentDesired <  longCashMin) { cashComponent =  longCashMin; console.log("equity component of long credits may not exceed " + (1-longCashMin)); }
  else if (type == "long"  && cashComponentDesired >  longCashMax) { cashComponent =  longCashMax; console.log(  "cash component of long credits may not exceed " + longCashMax); }
  else                                                             { cashComponent = cashComponentDesired }
  var equityComponent = 1 - cashComponent;
  return {  cash:                      quantity * cashComponent,
          equity: company.cashToEquity(quantity * equityComponent) };
}

var activityLevelFullTime = 20;
var activityLevelPartTime = 10;

function Participant(params) {
  this.company    = params.company;
  this.riskRating = params.riskRating || 0; // real
  this.seniority  = params.seniority  || 0; // int
  this.multiplier = params.multiplier || 0; // real

  this.badges = { }; // qualifications earned over time

  this.compensation = function(tasks) {
    var totalTaskSize = tasks.sum(function(t){return t.short + t.long});
    var activityLevel = (totalTaskSize > activityLevelFullTime ? 1   :
                         totalTaskSize > activityLevelPartTime ? 0.5 : 0);
                         


#+END_SRC

* Innovation: Teal Architecture

#+BEGIN_QUOTE
Any sufficiently complicated company w/o management contains an ad hoc, informally-specified, bug-ridden, slow implementation of management.
https://twitter.com/wycats/status/368752712894017536
#+END_QUOTE

A Teal or Holacratic architecture doesn't mean anarchy. It doesn't mean absence of management. It means self-management. In a Teal organization, people spend /more/ time doing management than in a traditional business. The difference is, people manage themselves and one another; they don't manage up and down.

** Participants

Individual human beings elect to participate in the company. Volunteers, interns, employees, contractors, opensource developers, content contributors, mailing list subscribers -- all are Participants. By participating in the company, they agree to abide by this governance model, and they have the right under this governance model to make requests, ask for advice, and be asked for advice. They also agree to subject themselves to the dispute resolution process.

A special category of "end-user" or "customer" exists. They are not considered a "participant" operating under this governance model until they take on a differentiated role, such as moderator, community leader, or opensource contributor. When they do, they are onboarded to this governance model, mostly by reading this document.

** Roles

A Role expresses a set of work processes. In a restaurant, Roles might be Waiter, Chef, Host, or Cashier. An individual at the restaurant might enact multiple roles: in a small restaurant, the Host might also act as a Cashier and a Waiter.

Individual participants can be onboarded to one or more Roles in a company.

** Circles

If multiple individuals play the same Role, they form a group called a Circle. Circles are a unit of abstraction and MUST exhibit consensus when dealing with other parties, even if that consensus is simply a statement explaining that there is no consensus yet, and describing the conflicting positions.

In a restaurant with multiple chefs, the Circle might be called Kitchen, and the waiters might deal with the Kitchen as a unit of abstraction: orders go in, dishes come out. Waiters don't want to know which chef is preparing which dish. Chefs don't want to know which waiter is serving which table. There is just a hole in the wall and a little bell that goes "ding!"

A Circle may appoint a member or members to act as Lead Links -- representatives of the Circle to other parts of the organization. If a waiter hears consistently from diners that the steaks are coming out too rare, that waiter needs to be able to raise the issue either with the entire Kitchen circle, or with one representative of the Kitchen who collates the feedback.

** Transparency.

It is annoying to not be able to find information when you need it. It is also annoying to be interrupted by people asking you for information.

All information relevant to other people in the company, particularly information that crosses the organizational boundary, SHOULD be recorded in a shared location accessible by other participants. This includes questions, discussions, decisions, policies, and processes.

Chat logs and mailing list logs are available and searchable in the messaging system. Note that direct messaging between participants about company business is discouraged. Even if there are only two participants of a Circle, the discussions within those participants should be conducted in a shared venue, and logged for the benefit of other participants of the company, and for the benefit of future members of the Circle!

So long as non-Asperger humans are involved in the project, face-to-face and tele/video conversations between team members are unlikely to ever be stamped out, but they MUST be minuted in a forum/archive accessible either to the relevant circle or, preferably, company-wide. The point here is that ephemeral discussions may live on in the memory traces of the participants, but the human mind is a fallible thing; [[http://www.english.illinois.edu/-people-/faculty/debaron/482/482readings/phaedrus.html][over Thamus's objections, we adopted writing]], and we should make the most of it.

Some exceptions exist.

Confidential information relating to private matters regarding participant/employee health, family, etc, may be excluded.

Private, ephemeral chats about non-company business may be excluded. "Lunch?" "Yoga?" etc.

Confidential, sensitive, or proprietary information such as passwords, competitive trade secrets, and user data protected by personal data privacy legislation may be excluded from the general transparency rule. In such cases, participants, roles, and circles may elect to share data within circles instead of with the whole company.

By default, all information should be fully public, even to non-participants of the company, unless there is a compelling reason to keep it private. Reasons to keep information within the company include: half-baked discussions-in-progress should not be exposed to misinterpretation by an uninformed public; competitive strategy may hurt the company if disclosed at the wrong time or in the wrong way; information relating to partnerships may be covered by NDA.

** The advice process.

Before making a decision, a role player (acting on behalf of their circle) MUST seek the advice of all parties who will be substantively affected by that decision.

** The request process.

Any participant can submit a request to any other participant about the way they play their role generally, or about a particular action specifically.

** The dispute resolution process.

If a conflict arises which is not naturally resolved within a circle, dispute resolution process defines an escalation pathway: a dispute resolution committee involving representatives from all advisory parties MUST be convened. If the dispute is not resolved within that committee, larger and larger advisory committees are convened. (In practice, the dispute is referred to larger and larger gatherings of the community. (There is a tension between the frequency of such referenda, and the size of the dispute. The decision to refer to a larger committee may be made by the dispute resolution committee.)

** The contribution process.

Content contributors and technology developers are subject to the [[https://guides.github.com/activities/contributing-to-open-source/][usual conventions of software projects]]. They may submit pull requests or have merge authority. The circle of Maintainers is usually smaller than the circle of Contributors. Contributors may be promoted to Maintainers by consensus of the Maintainer circle.

* Innovation: Training for Aesthetics

In organizations expressing design-driven innovations, important decisions often fall into an aesthetic rather than technical or economic domain.

Part of new-participant onboarding MUST involve recruitment for, and training in, the dominant aesthetics, principles, values, vision, and tensions of the project.

Minority or opposition opinions should be actively sought and aired. Consider the "Devil's Advocate" process.

* Corporate Form

As of 2015-06-06 Legalese has not been incorporated. This section proposes a corporate form.

Because it represents a high-potential, high-tech, high-impact innovation with commercial potential, Legalese needs to be able to take venture funding.

Legalese will be incorporated in Singapore as a Private Limited company.

Legalese needs to be scrupulously aware of the Legal Profession Act.

Legalese offers a number of products and services. Some of those products and services are free. Some are paid.



* Scalability

This is a software project. If some kind of user request needs human support, and it looks like that class of user request is going to be recurring, we need to find a way to hand off that user request to a network of partners, e.g. law firms who have staff standing by. We focus only on components that are scalable through software.

#+BEGIN_QUOTE
It is the essence of computer science that if a methodology does not scale up, then it isn't a methodology at all.

Robin Milner, /Is Computing an Experimental Science?/
#+END_QUOTE
