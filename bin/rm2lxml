#!/usr/bin/perl

# redmart xml to legalese xml
# 
# for processing the redmart shareholder agreement into a form usable for otherss
# 
# to generate the source files, run adobe acrobat pro DC export PDF to HTML, one file per section
# 10062  2016-02-15 15:47  rsync -va RM-SSA/ rmxml/
# 10063  2016-02-15 15:48  cd rmxml/
# 10064  2016-02-15 15:48  ls
# 10065  2016-02-15 15:48  rename s/htm/xml/ *
# 10067  2016-02-15 15:48  time for i in *.xml; do ~/non-db-src/l/www/bin/xml2xml $i; done

use strict;
my %twigs;
my $xprefix = "rm_";

use Tie::IxHash;
tie %twigs, 'Tie::IxHash';
my %knownclauses;

$|++; select STDERR; $|++; select STDOUT;

use XML::Twig;
foreach my $file (@ARGV) {
  my $t = $twigs{$file} = XML::Twig->new(comments=>"keep",pretty_print=>"record",no_prolog=>1);
  if    ($file =~ /\.html?/) { $t->parsefile_html( $file ); }
  elsif ($file =~ /\.xml?/)  { $t->parsefile( $file ); }
  else                       { $t->parsefile( $file ); }

  foreach my $el ($t->get_xpath("//p[\@class='nav']"),
				  $t->get_xpath("//p[\@class='top_nav']"),
				  $t->get_xpath("//head"),
				  $t->get_xpath("//br"))   { $el->delete }
  foreach my $el ($t->get_xpath("//p"),
				  $t->get_xpath("//h3"))   { numbered($t, $el, $file) }
  foreach my $el ($t->get_xpath("//p"))    { number_siblings($t, $el, {}, $file) }
  foreach my $el ($t->get_xpath("//body")) { $el->erase }
  foreach my $el ($t->get_xpath("//html")) { $el->set_gi("Inclusion"); $el->del_atts; $el->set_att(file => $file); }
}

my @output;

foreach my $file (keys %twigs) {
  my $t = $twigs{$file};
  foreach my $el ($t->get_xpath("//p"),
				  $t->get_xpath("//numbered_2_para"),
				  $t->get_xpath("//numbered_3_para"),
	  )    { xref($t, $el, $file); }
  push @output, split(/\n/,$t->sprint());
}

for my $i (0 .. $#output) {
  local $_ = $output[$i];
  if (/^\s*(<xref to.*)/) {
	$output[$i-1] .= $1;
	$output[$i] = "";
  }
}
@output = grep length, @output;
print join"\n",@output;

# input: <p>1.2 blah blah</p>
# output: <numbered_2_para>blah blah</p>
sub numbered {
  my ($t, $el, $file) = @_;

  if (grep { $_->name ne "#PCDATA" } $el->children) {
	my $childrens = join(" ", map { $_->sprint } grep { $_->name ne "#PCDATA" } $el->children );
#	$el->insert_new_elt(before => "#COMMENT", {}, "HAD CHILDREN $childrens");
  }

  my $text = $el->text;
  for ($text) { s/^\s+//; s/\s+$//; }
  my $comment;
  
  if ($text =~ s/^([0-9.]+)\.?(\s|$)//) {
	my $num = $1;
	$num =~ s/\.$//;
	$el->set_att("orig_num" => $num);
	$knownclauses{$num} = [ $file, $el ];
	my $dotcount = $num =~ tr/././;
	if    ($dotcount == 0) { $el->set_gi("a_left_sidehead"); $el->set_att(xname => xname($el, $num, $text)); }
	elsif ($dotcount == 1) { $el->set_gi("numbered_2_para"); }
	elsif ($dotcount == 2) { $el->set_gi("numbered_3_para"); }
	elsif ($dotcount == 3) { $el->set_gi("numbered_4_para"); }
  }
  else {
	$comment = "MAY NEED FIXING";
  }
  for ($text) { s/^\s+//; s/\s+$//; s/\s*[\r\n]\s*//g; }
  if (not length $text) { $el->delete; return; }
  $el->set_text($text);
  $el->del_att("style", "class");
  $el->set_att("comment" => $comment) if $comment;
}

# input:   <numbered_2_para>look at:</numbered_2_para> <p>(a) first</p><p>(b) second</p>
# output: <numbered_2_para>look at:</numbered_2_para>  <numbered_3_para>first</numbered_3_para> <numbered_3_para>second</numbered_3_para>
sub number_siblings { # they're not actually children -- they're successor siblings
  my ($t, $el, $stylemap, $file) = @_;
  # keep numbering siblings, skipping over those of a different list style, until we run into a numbered_x_para tag
  if ($el->tag ne "p") { return }
  
  my $firstbit = substr($el->text,0,20);
#  warn "*** considering $firstbit\n";
  
  # the first time we run this, the stylemap is not set.
  my $style = liststyle($el->text);
#  warn "  * that is style $style\n";
  if (not $style) { return }
  if (not $stylemap->{$style}) {
#	warn " ** need to deduce style from previous element $prevel; stylemap is @{[%$stylemap]}\n";
	my $prev_level = previous_numbered($el->prev_sibling);
	$prev_level || return;
	$stylemap->{$style} = $prev_level+1;
  }
  my $level = $stylemap->{$style};
#  warn "  * my level is $level\n";

  # increase the number if the previous element has a different liststyle not seen before
  # set the number to the known level if the previous element has a liststyle seen before
  my $orig_tag = $el->name;
  $el->set_gi("numbered_${level}_para");

  # warn " ** setting tag to level $level\n";
  $el->del_att("comment") if $el->att("comment") eq "MAY NEED FIXING";

  my $text = $el->text;
  if ($text =~ s/^\((\S+?)\)\s*//) {
	$el->set_text($text);
	$el->set_att(orig_prefix => $1);
  }

  # recurse to next sibling
  if ($el->next_sibling && $el->next_sibling->tag eq $orig_tag) {
	# warn ">   recursing\n";
	number_siblings($t, $el->next_sibling, $stylemap, $file);
  }
}

sub previous_numbered {
  my ($el) = @_;
  if (not $el) { return }
  if ($el->name =~ /numbered_(\d+)_para/) { return $1 }
  return previous_numbered($el->prev_sibling);
}

sub liststyle {
  local $_ = shift;
  /^\([a-h]+\)/ and return "abc";
  /^\([A-H]+\)/ and return "ABC";
  /^\([ivx]+\)/ and return "roman";
  /^\([IVX]+\)/ and return "ROMAN";
  return undef;
}

# input: see also Clause X.Y
# input: see also <xref to="x.y" />
sub xref {
  my ($t, $el) = @_;
  return if not ($el->text =~ /Clause ([0-9.]+)/);
  my $text = $el->text;
  warn "*** replacing Clause $1!\n";
  $text =~ s/Clause ([0-9.]+)/"Clause " . xref_to($1,$el)/eg;
  # split text into children : PCDATA, clause link, PCDATA, clause link, PCDATA.
  my @new_children = split(/(?=<xref)|(?<=\/>)/, $text);
  $el->cut_children;
  for (@new_children) {
	warn " *- $_\n";
	if (/<xref to="([^"]+)"\s*\/>/) {
	  $el->insert_new_elt(last_child => xref => { to => $1 });
	  # TODO: if the subsequent bit of text has parens and is ucfirsted, and if the dstel has tag=~/firstbold$/, add the attribute      format="Paragraph Number (firstbold)"	}
	} else {
	  $el->insert_new_elt(last_child => "#PCDATA" => {} => $_);
	}
  }

  
#  $el->set_text($text);
}

sub xref_to {
  my ($num, $src) = @_;
  warn ">>> xref linking to destination $num\n";
  
  my $dst = $knownclauses{$num};
  if (not $dst) { warn " >> we haven't encountered that in knownclauses.\n"; return $num }

  my $dstel = $dst->[1];

  my $xname = $dstel->att("xname");
  if (! $xname) { $dstel->set_att(xname => $xname = xname($dstel, $num)); }

  warn "  > linked to xname $xname\n";
  return qq(<xref to="$xname"/>);
}

sub xname {
  my ($el, $num, $text) = @_;
  $text ||= $el->text;
  my $candidate = asvar(substr($text,0,40));
  if ($num) { $candidate = $num . "_" . $candidate }
  my $suffix;
  my $orig = $candidate;
  while ($knownclauses{$candidate}) {
	warn "!!! naive xname/xref generator collided: $candidate\n";
	$suffix++;
	$candidate = $orig . $suffix;
  }
  return $candidate;
}
  
sub asvar {
  local $_ = lc shift;
  s/^\s+//;
  s/\s+$//;
  s/\s+/ /;
  s/\W/_/g;
  s/ /_/g;
  s/_+/_/g;
  s/^_//;
  s/_$//;
  return $_;
}
